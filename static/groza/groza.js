


    var regions = [ [[500, 55, 80, 48], [415, 140, 72, 48], [530, 80, 80, 60], [460, 180, 72, 60] ], //0
            [[530, 80, 80, 60], [460, 180, 72, 60], [560, 90, 80, 72], [510, 210, 72, 72] ], //1
            [[560, 90, 80, 72], [510, 210, 72, 72], [590, 115, 80, 84], [570, 235, 72, 84] ], //2
            [[590, 115, 80, 84], [570, 235, 72, 84], [635, 120, 80, 96], [625, 245, 72, 96] ], //3
            [[635, 120, 80, 96], [625, 245, 72, 96], [670, 120, 80, 108], [685, 245, 72, 108] ], //4
            [[670, 120, 80, 108], [685, 245, 72, 108], [710, 110, 80, 120], [740, 230, 72, 120] ], //5
            [[710, 110, 80, 120], [740, 230, 72, 120], [740, 90, 80, 132], [800, 205, 72, 132] ], //6
            [[740, 90, 80, 132], [800, 205, 72, 132], [770, 70, 80, 144], [850, 170, 72, 144] ], //7
            [[770, 70, 80, 144], [850, 170, 72, 144], [795, 0, 80, 156], [890, 130, 72, 156] ], //8

            [[350, 45, 72, 24], [230, 100, 64, 24], [380, 90, 72, 36], [270, 110, 64, 36] ], //9
            [[380, 90, 72, 36], [270, 110, 64, 36], [415, 140, 72, 48], [325, 230, 64, 48]  ],//10
            [[415, 140, 72, 48], [325, 230, 64, 48], [460, 180, 72, 60], [390, 285, 64, 60]  ],//11
            [[460, 180, 72, 60], [390, 285, 64, 60], [510, 210, 72, 72], [460, 325, 64, 72]  ],//12
            [[510, 210, 72, 72], [460, 325, 64, 72], [570, 235, 72, 84], [540, 350, 64, 84]  ],//13
            [[570, 235, 72, 84], [540, 350, 64, 84], [625, 245, 72, 96], [620, 365, 64, 96]  ],//14
            [[625, 245, 72, 96], [620, 365, 64, 96], [685, 245, 72, 108], [700, 365, 64, 108]  ],//15
            [[685, 245, 72, 108], [700, 365, 64, 108], [740, 230, 72, 120], [780, 350, 64, 120]  ],//16
            [[740, 230, 72, 120], [780, 350, 64, 120], [800, 205, 72, 132], [860, 315, 64, 132]  ],//17
            [[800, 205, 72, 132], [860, 315, 64, 132], [850, 170, 72, 144], [925, 270, 64, 144]  ],//18
            [[850, 170, 72, 144], [925, 270, 64, 144], [890, 130, 72, 156], [980, 210, 64, 156]  ],//19
            [[890, 130, 72, 156], [980, 210, 64, 156], [920, 80, 72, 168], [1025, 150, 64, 168]  ],//20
            [[920, 80, 72, 168], [1025, 150, 64, 168], [950, 25, 72, 180], [1060, 70, 64, 180]  ],//21

            [[230, 100, 64, 24], [135, 150, 56, 24], [270, 110, 64, 36], [180, 240, 56, 36]  ],//22
            [[270, 110, 64, 36], [180, 240, 56, 36], [325, 230, 64, 48], [245, 320, 56, 48]  ],//23
            [[325, 230, 64, 48], [245, 320, 56, 48], [390, 285, 64, 60], [320, 385, 56, 60]  ],//24
            [[390, 285, 64, 60], [320, 385, 56, 60], [460, 325, 64, 72], [410, 435, 56, 72]  ],//25
            [[460, 325, 64, 72], [410, 435, 56, 72], [540, 350, 64, 84], [510, 470, 56, 84]  ],//26
            [[540, 350, 64, 84], [510, 470, 56, 84], [620, 365, 64, 96], [610, 480, 56, 96]  ],//27
            [[620, 365, 64, 96], [610, 480, 56, 96], [700, 365, 64, 108], [710, 480, 56, 108]  ],//28
            [[700, 365, 64, 108], [710, 480, 56, 108], [780, 350, 64, 120], [810, 450, 56, 120]  ],//29
            [[780, 350, 64, 120], [810, 450, 56, 120], [860, 315, 64, 132], [910, 410, 56, 132]  ],//30
            [[860, 315, 64, 132], [910, 410, 56, 132], [925, 270, 64, 144], [990, 355, 56, 144]  ],//31
            [[925, 270, 64, 144], [990, 355, 56, 144], [980, 210, 64, 156], [1065, 290, 56, 156]  ],//32
            [[980, 210, 64, 156], [1065, 290, 56, 156], [1025, 150, 64, 168], [1130, 210, 56, 168]  ],//33
            [[1025, 150, 64, 168], [1130, 210, 56, 168], [1060, 70, 64, 180], [1180, 120, 56, 180]  ],//34

            [[100, 60, 56, 12], [-30, 100, 48, 12], [135, 150, 56, 24], [20, 210, 48, 24]  ],//35
            [[135, 150, 56, 24], [20, 210, 48, 24], [180, 240, 56, 36], [80, 310, 48, 36]  ],//36
            [[180, 240, 56, 36], [80, 310, 48, 36], [245, 320, 56, 48], [165, 400, 48, 48]  ],//37
            [[245, 320, 56, 48], [165, 400, 48, 48], [320, 385, 56, 60], [260, 480, 48, 60]  ],//38
            [[320, 385, 56, 60], [260, 480, 48, 60], [410, 435, 56, 72], [375, 540, 48, 72]  ],//39
            [[410, 435, 56, 72], [375, 540, 48, 72], [510, 470, 56, 84], [480, 580, 48, 84]  ],//40
            [[510, 470, 56, 84], [480, 580, 48, 84], [610, 480, 56, 96], [610, 600, 48, 96]  ],//41
            [[610, 480, 56, 96], [610, 600, 48, 96], [710, 480, 56, 108], [720, 590, 48, 108]  ],//42
            [[710, 480, 56, 108], [720, 590, 48, 108], [810, 450, 56, 120], [855, 570, 48, 120]  ],//43
            [[810, 450, 56, 120], [855, 570, 48, 120], [910, 410, 56, 132], [960, 520, 48, 132]  ],//44
            [[910, 410, 56, 132], [960, 520, 48, 132], [990, 355, 56, 144], [1070, 450, 48, 144]  ],//45
            [[990, 355, 56, 144], [1070, 450, 48, 144], [1065, 290, 56, 156], [1160, 370, 48, 156]  ],//46
            [[1065, 290, 56, 156], [1160, 370, 48, 156], [1130, 210, 56, 168], [1220, 260, 48, 168]  ],//47

            [[80, 310, 48, 36], [-10, 380, 40, 36], [165, 400, 48, 48], [80, 490, 40, 48]  ],//48
            [[165, 400, 48, 48], [80, 490, 40, 48], [260, 480, 48, 60], [80, 490, 40, 60]  ],//49
            [[855, 570, 48, 120], [880, 670, 40, 120], [960, 520, 48, 132], [1020, 620, 40, 132]  ],//50
            [[960, 520, 48, 132], [1020, 620, 40, 132], [1070, 450, 48, 144], [1140, 550, 40, 144]  ],//51
            [[1070, 450, 48, 144], [1140, 550, 40, 144], [1160, 370, 48, 156], [1250, 440, 40, 156] ] ]//52






		
		var cvsmap = document.getElementById('canvas');
		var ctxmap = cvsmap.getContext('2d');
		var map = new Image();
		

		map.src='../static/groza/map.jpg';

		function draw(){
			ctxmap.drawImage(map,0,0);
			}	

		map.onload = draw ;

		var cvslines = document.getElementById('secondcanvas');
		var ctxlines = cvslines.getContext('2d');

		function drawpoint(){
				
				ctxlines.setTransform(1, 0, 0, 1, 0, 0);
				ctxlines.clearRect(0, 0, cvslines.width, cvslines.height);
				ctxlines.clear;
				draw()
				let x = 0, y = 0 ; 
			    x = document.getElementById('xline').value;
			    x = parseInt(x);
			    y = document.getElementById('yline').value;
			    y = parseInt(y);








				region = Find_Region(x,y)
				points = Find_point_on_region(region,x,y);
				x = points[0];
				y = points[1];

			    ctxlines.beginPath();
				ctxlines.moveTo(x, 0);
				ctxlines.lineWidth = 3;
				ctxlines.lineTo(x, cvslines.height);
				ctxlines.stroke();

				ctxlines.beginPath();
				ctxlines.moveTo(0, y);
				ctxlines.lineWidth = 3;
				ctxlines.lineTo(cvslines.width, y);
				ctxlines.stroke();



				


				
				

				}






 





		function Find_Region(latitude, longitude){
			let flag = false
				
			for (let i = 0; i < regions.length; i++) { 
				
				flag = true;
				flag = flag && (regions[i][0][3] <= longitude);
	            flag = flag && (regions[i][2][3] > longitude);
	            flag = flag && (regions[i][0][2] > latitude);
	            flag = flag && (regions[i][1][2] <= latitude);
	            if (flag) {return i};
	            
			};
		}

		function Find_point_on_region(i,latitude,longitude){

			let x0 = 0;
            let y0 = 0;
            /*
            x0 = ((longitude - regions[i][0][3]) * (regions[i][2][0] - regions[i][0][0]) / (regions[i][2][3] - regions[i][0][3]) + regions[i][0][0] + (longitude - regions[i][1][3]) * (regions[i][3][0] - regions[i][1][0]) / (regions[i][3][3] - regions[i][1][3]) + regions[i][0][0]) / 2;r
            y0 = ((latitude - regions[i][0][2]) * (regions[i][1][1] - regions[i][0][1]) / (regions[i][1][2] - regions[i][0][2]) + regions[i][0][1] + (latitude - regions[i][2][2]) * (regions[i][3][1] - regions[i][2][1]) / (regions[i][3][2] - regions[i][2][2]) + regions[i][2][1]) / 2;
            */
            //let L = 0;
            //let d = 0;
            let x1 = 0;
            let x2 = 0;
            let x3 = 0;
            let x4 = 0;
            let y1 = 0;
            let y2 = 0;
            let y3 = 0;
            let y4 = 0;
            let A = 0;
            let B = 0;
            let C = 0;
            /*
            L = (longitude - regions[i][0][3]) / (regions[i][2][3] - longitude);
            d = (latitude - regions[i][1][2]) / (regions[i][0][2] - latitude);
            */
            if ((regions[i][0][2] == latitude) && regions[i][0][3] == longitude) return [regions[i][0][0] , regions[i][0][1] ];
            else if ((regions[i][1][2] == latitude) && regions[i][1][3] == longitude) return [regions[i][1][0] , regions[i][1][1] ];
            else if ((regions[i][2][2] == latitude) && regions[i][2][3] == longitude) return [regions[i][2][0] , regions[i][2][1] ];
            else if ((regions[i][3][2] == latitude) && regions[i][3][3] == longitude) return [regions[i][3][0] , regions[i][3][1] ];
            else
            {
                x1 = ((regions[i][2][3] - longitude) * regions[i][0][0] + (longitude - regions[i][0][3]) * regions[i][2][0]) / (regions[i][2][3] - regions[i][0][3]);
                y1 = ((regions[i][2][3] - longitude) * regions[i][0][1] + (longitude - regions[i][0][3]) * regions[i][2][1]) / (regions[i][2][3] - regions[i][0][3]);
                x2 = ((regions[i][2][3] - longitude) * regions[i][1][0] + (longitude - regions[i][0][3]) * regions[i][3][0]) / (regions[i][2][3] - regions[i][0][3]);
                y2 = ((regions[i][2][3] - longitude) * regions[i][1][1] + (longitude - regions[i][0][3]) * regions[i][3][1]) / (regions[i][2][3] - regions[i][0][3]);
                x3 = ((regions[i][0][2] - latitude) * regions[i][1][0] + (latitude - regions[i][1][2]) * regions[i][0][0]) / (regions[i][0][2] - regions[i][1][2]);
                y3 = ((regions[i][0][2] - latitude) * regions[i][1][1] + (latitude - regions[i][1][2]) * regions[i][0][1]) / (regions[i][0][2] - regions[i][1][2]);
                x4 = ((regions[i][0][2] - latitude) * regions[i][3][0] + (latitude - regions[i][1][2]) * regions[i][2][0]) / (regions[i][0][2] - regions[i][1][2]);
                y4 = ((regions[i][0][2] - latitude) * regions[i][3][1] + (latitude - regions[i][1][2]) * regions[i][2][1]) / (regions[i][0][2] - regions[i][1][2]);

                C = (y2 - y1) * (x4 - x3) - (x2 - x1) * (y4 - y3);
                A = (x1 * y2 - y1 * x2) * (x4 - x3) - (x3 * y4 - y3 * x4) * (x2 - x1);
                B = (x1 * y2 - y1 * x2) * (y4 - y3) - (x3 * y4 - y3 * x4) * (y2 - y1);
                x0 = A / C;
                y0 = B / C;};
            
            /*
            x0 = ((longitude - regions[i][0][3]) * (regions[i][2][0] - regions[i][0][0]) / (regions[i][2][3] - regions[i][0][3]) + regions[i][0][0] + (longitude - regions[i][1][3]) * (regions[i][3][0] - regions[i][1][0]) / (regions[i][3][3] - regions[i][1][3]) + regions[i][0][0]) / 2;
            y0 = ((latitude - regions[i][0][2]) * (regions[i][1][1] - regions[i][0][1]) / (regions[i][1][2] - regions[i][0][2]) + regions[i][0][1] + (latitude - regions[i][2][2]) * (regions[i][3][1] - regions[i][2][1]) / (regions[i][3][2] - regions[i][2][2]) + regions[i][2][1]) / 2;
            */
            //console.log(L)
            //console.log(d)
            
            return [x0, y0] ;







		}